extends layout
block content
  script(language="javascript" type="text/javascript" src="Jit/jit-yc.js")
  script(language="javascript" type="text/javascript" src="javascript/parse_trees.js")
  div.form-style-1
    h2 Parser output
    fieldset.form-style-1
      div
        label Parsing time: 
        input(type="text", value="#{results.parsingTime} ms", readonly)
      div
        label Number of parses:
        input(type="text", value=results.fullParseItems.length, readonly)
      div
        label Number of items created: 
        input(type="text", value=results.nrOfItems, readonly)
      div
        label In language: 
        input(type="text", value="#{results.inLanguage}", readonly)
      br
      div
        label Chart
        table(border="1px")
          tr
            td(width="50px", height="50px", align="center")=""
            - for (var i = 0; i < results.sentenceLength; i++) {
                td(width="50px", height="50px", align="center")=results.taggedSentence[i][0]
            - }
          tr
            td(width="50px", height="50px", align="center")=""
            - for (var i = 0; i < results.sentenceLength; i++) {
                td(width="50px", height="50px", align="center")=results.taggedSentenceCategories[i]
            - }
          tr
            - for (var i = 0; i <= results.sentenceLength; i++) {
                td(width="130px", height="50px", align="center")=i
            - }
          tr
            - for (var i = 0; i < results.sentenceLength; i++) {
              tr
                td(width="30px", height="50px", align="center")=i
                - for (var j = 1; j <= results.sentenceLength; j++) {
                    td(width="50px", height="50px", align="left")=results.chart.get_complete_items_from_to(i, j).length
                - }
            - }
        label Parse trees
        div
          select(name="Available parses", id="selectParseItem", onchange="updateTreeAndFS(this.options[this.selectedIndex].value)")
            - for (var i = 0; i < results.fullParseItems.length; i++) {
                option(value=i) #{"Parse " + i + ": " + results.fullParseItems[i].id}
            - }
        div(id="infovis" style="position:relative; height:700px; width:900px; border:solid 1px #333;")
        label Feature Structure
        textarea(id="textAreaFS", rows="20" cols="80")
          | empty
    h2 Tokenizer output
    fieldset.form-style-1
      div
        label Sentence length: 
        input(type="text", value=results.sentenceLength, readonly)
      div 
        label Tokenized sentence: 
        input(type="text", value="#{JSON.stringify(results.tokenizedSentence)}", readonly)
    h2 Tagger output
    fieldset.form-style-1
      div
        label Tagged sentence:
        textarea(rows="20" cols="80")
          |#{results.taggedSentencePrettyPrint}
        label Stripped tokens:
        input(type="text", value=settings.strippedTokens, readonly)
    h2 Settings used
    fieldset
      ul
        li
          label Type lattice
        fieldset
          li
            input(type="text", value=settings.typeLatticeFile, readonly)
          li
            label
              input(type="checkbox", name="hasAppropriateFunction", checked=settings.typeLatticeHasAppropriateFunction, disabled)
              = " Type lattice has appropriate function"
        li
          label Tokenizer
        fieldset
          label Algorithm: 
          li
            input(type="text", value=settings.tokenizerAlgorithm, readonly)
          if (settings.tokenizerAlgorithm==="regexpTokenizer")
            label Regular Expression
            li
              input(type="text", value=settings.regularExpression, readonly)
        li
          label Tagger
        fieldset
          if settings.useWordnet
            label
              input(type="checkbox", name="useWordnet", checked=settings.useWordnet, disabled)
              = " Use Wordnet"
          else
            li
              input(type="text", value=settings.lexiconFile, readonly)
          li
            label
              input(type="checkbox", name="hasFeatureStructures", checked=settings.lexiconHasFeatureStructures, disabled)
              = " Lexicon assigns feature structures"
        li
          label Parser
        fieldset
          li
            input(type="text", value=settings.grammarFile, readonly)
          li
            label
              input(type="checkbox", name="isCNF", checked=settings.grammarIsInCNF, disabled)
              = " Grammar is in Chomsky Normal Form"
          li
            label
              input(type="checkbox", name="hasConstraints", checked=settings.grammarHasUnificationConstraints, disabled)
              = " Grammar has unification constraints"
          li 
            label Parsing algorithm: 
            input(type="text", value=settings.parsingAlgorithm, readonly)
          li 
            label
              input(type="checkbox", name="applyUnification", checked=settings.applyUnification, disabled)
              = " Apply unification"
          li 
            label
              input(type="checkbox", name="applyAppropriateFunction", checked=settings.applyAppropriateFunction, disabled)
              = " Apply appropriate function"
    script(language="javascript" type="text/javascript").
      var local_data = !{JSON.stringify(results.fullParseItems)};
      var selectParseItem = document.getElementById("selectParseItem");
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent("change", true, true ); // event type, bubbling,cancelable
      selectParseItem.dispatchEvent(evt);

      function updateTreeAndFS(index) {
        init_spacetree(local_data[index]);
        var ta = document.getElementById("textAreaFS");
        ta.value = local_data[index].data.fsPretty;
      }